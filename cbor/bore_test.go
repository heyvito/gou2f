package cbor

import (
	"encoding/hex"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestBoreRegisterResult(t *testing.T) {
	data, err := hex.DecodeString("a301667061636b65640258b436eb78cf561d7f7cf6fa772fd4449e38636fe10df6143e459130685f4dbbddf345000000032fc0579f811347eab116bb5a8db9202a0030be62891ba808768c1aea2158b469a87453782a0043fbef5ed009dce77f19b7dc961b1c4ea0acb65526787e2250f22797a5010203262001215820be62891ba808768c1aea2158b42ddfe3794afb6cb539f6af993800d1155ae331225820d4a7fc0c651091810b035b01c1b1d82794315ef217ee2a3bb0aae31450b3efd603a363616c67266373696758473045022100c887b02202289db704d80dd71009c8f3dc5e28032a30991a1c1d1835452095290220109376539682a3abd34e0370d2a7ebdb9456dbaeea51e8d612d41104d956cfaf63783563815902dd308202d9308201c1a003020102020900df92d9c4e2ed660a300d06092a864886f70d01010b0500302e312c302a0603550403132359756269636f2055324620526f6f742043412053657269616c203435373230303633313020170d3134303830313030303030305a180f32303530303930343030303030305a306f310b300906035504061302534531123010060355040a0c0959756269636f20414231223020060355040b0c1941757468656e74696361746f72204174746573746174696f6e3128302606035504030c1f59756269636f205532462045452053657269616c20313135353130393539393059301306072a8648ce3d020106082a8648ce3d030107034200040a186c6e4d0a6a528a44909a7a2423687028d4c57eccb717ba1280b85c2fc1e4e061668c3c20aef33350d19645238a2c390bf5dffa34ff25502f470f3d40b888a38181307f3013060a2b0601040182c40a0d0104050403050403302206092b0601040182c40a020415312e332e362e312e342e312e34313438322e312e373013060b2b0601040182e51c0201010404030204303021060b2b0601040182e51c010104041204102fc0579f811347eab116bb5a8db9202a300c0603551d130101ff04023000300d06092a864886f70d01010b0500038201010082acaf1130a99bd14327d2f8f9b041a2a04a6685272422e57b14b0b8f83b6f1545664bbf55681eaf0158722abfced2e4ac633cec0959564524b0f2e517dd971098b9891517ecd0c553a2e4739f9de13dafd0d5d7b8ac4a37f4f2cc30ef25cb00652d19db69d7da57bd1a9c1d8ed87d46d80d2b3bdfd1d9ef9d2b6832d4ad5bcd74214ce6a6141d16b2e93acb2c88f60a3eb6d5f61471975909373bc677902324571a573f60f07bbed17b92c8b59fa28210bfa8c6012293001b39efe57bf9cb1e3aca8a4130f83af8668f73def2711b20dc99e8a804eea3f7427197b6b451b3735c23bc9b1be274c26d3bf9196f8c4a4b715f4b95c4db7b97e7594eb465648c1c")
	require.NoError(t, err)
	decoded, err := Unmarshal(data)
	require.NoError(t, err)
	ok, format := MustBore[string](decoded, "0->u:0x1")
	require.True(t, ok)
	require.Equal(t, "packed", format)

	ok, authData := MustBore[[]byte](decoded, "0->u:0x2")
	require.True(t, ok)
	require.NotNil(t, authData)

	ok, alg := MustBore[int](decoded, "0->u:0x3->t:alg")
	require.True(t, ok)
	require.NotZero(t, alg)

	ok, sig := MustBore[[]byte](decoded, "0->u:0x3->t:sig")
	require.True(t, ok)
	require.NotNil(t, sig)

	ok, x5c := MustBore[[]byte](decoded, "0->u:0x3->t:x5c->0")
	require.True(t, ok)
	require.NotNil(t, x5c)
}
